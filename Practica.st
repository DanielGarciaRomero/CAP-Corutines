Object subclass: #Coroutine	instanceVariableNames: 'savedBlock resumeBlock continuacio'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica'!!Coroutine commentStamp: 'Anonymous 1/22/2017 02:39' prior: 0!A Coroutine is xxxxxxxxx.!!Coroutine methodsFor: 'initialize-release' stamp: 'Anonymous 1/24/2017 00:13'!initialize 	super initialize.	resumeBlock := [ :nomCor :valorCor | 		      continuacio := Continuation fromContext: thisContext sender.			nomCor value: valorCor.	].	! !!Coroutine methodsFor: 'accessing' stamp: 'Anonymous 1/20/2017 11:46'!continuacio	^ continuacio! !!Coroutine methodsFor: 'accessing' stamp: 'Anonymous 1/20/2017 11:46'!resumeBlock	^ resumeBlock! !!Coroutine methodsFor: 'accessing' stamp: 'Anonymous 1/20/2017 11:47'!continuacio: anObject	continuacio := anObject! !!Coroutine methodsFor: 'accessing' stamp: 'Anonymous 1/15/2017 09:07'!savedBlock	^ savedBlock! !!Coroutine methodsFor: 'accessing' stamp: 'Anonymous 1/15/2017 09:07'!savedBlock: anObject	savedBlock := anObject! !!Coroutine methodsFor: 'accessing' stamp: 'Anonymous 1/20/2017 11:46'!resumeBlock: anObject	resumeBlock := anObject! !!Coroutine methodsFor: 'all' stamp: 'Anonymous 1/21/2017 13:00'!value: valor	continuacio notNil		ifTrue: [continuacio value: valor]		ifFalse: [savedBlock value: resumeBlock value: valor.]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Coroutine class	instanceVariableNames: ''!!Coroutine class methodsFor: 'all' stamp: 'Anonymous 1/15/2017 09:08'!maker: block	^ self  new savedBlock: block! !TestCase subclass: #CoroutineTest	instanceVariableNames: 'corutina corutina2 corutina3 corutina4 bloque numero'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica'!!CoroutineTest commentStamp: 'Anonymous 1/22/2017 02:42' prior: 0!A CoroutineTest is xxxxxxxxx.Instance Variables	bloque:			<Object>	corutina:		<Object>	corutina2:		<Object>	corutina3:		<Object>	corutina4:		<Object>	numero:		<Object>bloque	- xxxxxcorutina	- xxxxxcorutina2	- xxxxxcorutina3	- xxxxxcorutina4	- xxxxxnumero	- xxxxx!!CoroutineTest methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/21/2017 12:31'!testCoroutineEstatInicial	|aux|	aux := [:resume :value | Transcript show: 'This is A'; cr.] asString.	self assert: bloque asString = aux.	self assert: corutina continuacio isNil.! !!CoroutineTest methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/24/2017 02:46'!setUp	corutina := Coroutine maker: [:resume :value | Transcript show: 'This is A'; cr.].	bloque := corutina savedBlock.	numero := 0.	corutina2 := Coroutine maker: [:resume :value | numero := 2+3].	corutina3 := Coroutine maker: [ :resume :value |					numero := numero+1.					numero := numero + (resume value: corutina4 value: 'A').					numero := numero+3].	corutina4 := Coroutine maker: [ :resume :value |					(resume value: corutina3 value: 2).].! !!CoroutineTest methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/21/2017 12:31'!testCoroutineExecutaSegonaVegada	corutina3 value: nil.	self assert: numero = 6.	self assert: corutina3 continuacio notNil.! !!CoroutineTest methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/21/2017 12:30'!testCoroutineExecutaPrimeraVegada	corutina2 value: nil.	self assert: numero = 5.	self assert: corutina2 continuacio isNil.! !